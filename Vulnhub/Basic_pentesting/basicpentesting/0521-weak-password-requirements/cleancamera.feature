## Version 1.4.1
## language: en

Feature:
  TOE:
    basic pentesting
  Location:
    192.168.0.25:80
  CWE:
    CWE-521: Weak Password Requirements
  Rule:
    REQ.142 Change system default credentials
  Goal:
    Accessing the website as an administrator
  Recommendation:
    Place more secure authentication credentials

  Background:
  Hacker's software:
    | <Software name> | <Version>   |
    | Kali Linux      | 2020.1      |
    | Firefox Quantum | 68.20esr    |
    | Nmap            | 7.80        |
    | Gobuster        | 3.0.1       |
  TOE information:
    Given I'm accessing the server 192.168.0.25
    And HTTP is open on port 80
    And is running on Ubuntu 2.6.24

  Scenario: Normal use case
  The server has an access to a web page
    Given I'm scanning the server
    """
    $ nmap -p- -sV 192.168.0.31 --open
    """
    When I can see which ports are open
    """
    PORT   STATE SERVICE VERSION
    21/tcp open  ftp     ProFTPD 1.3.3c
    22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.2
    80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))
    """
    Then I decide to enter port 80 to see the website

  Scenario: Static detection
  No code given

  Scenario: Dynamic detection
  Website with wordpress
    Given I found a port 80
    When I decide to go in
    """
    http://192.168.0.25:80
    """
    Then I see that it's a very simple website
    And I decide to inspect the code with firefox's "Inspect Element"
    When I see that the code has nothing interesting for me
    Then I decide to scan the IP to see if it has any "end points"
    """
    $ gobuster dir -u http://192.168.0.25/
      -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
      -x php,txt,html
    """
    And it generates an interesting result
    """
    /index.html (Status: 200)
    /secret (Status: 301)
    """

  Scenario: Exploitation
  Access to wordpress as an administrator user
    Given I found an path with the name "/secret"
    When I decide to go on that route like this
    """
    http://192.168.0.25/secret
    """
    Then I see it's a page without any "CSS"
    And I'm going in to check the code to see if there's anything interesting
    When I realize that there are several URLs that use this "Host"
    """
    vtcsec/
    """
    Then I decide to add that "Host" to the "IP" of the victim server
    And to do that I have to put it in my "Host" file like this
    """
    $ vim /etc/hosts
    """
    When I decide to go to the page again but with the "Host" that I found
    """
    http://vtcsec/secret
    """
    Then I realize that the page has been changed with a better "CSS"
    And it has a login link that's from "Wordpress"
    When I decide to log in with these credentials
    """
    username: admin
    paswword: admin
    """
    And I have access to the Wordpress panel as an administrator

  Scenario: Remediation
  No code given

  Scenario: Scoring
  Severity scoring according to CVSSv3 standard
  Base: Attributes that are constants over time and organizations
    {basenumber}/10 ({baseword}) - {basevectorstring}
  Temporal: Attributes that measure the exploit's popularity and fixability
    {tempnumber}/10 ({tempword}) - {tempvectorstring}
  Environmental: Unique and relevant attributes to a specific user environment
    {envnumber}/10 ({envword}) - {envvectorstring}
  


  """
  Folder Naming Convention:
  In the folder structure training/vbd/toe/vulnerability/feature
  Hackers will often have to create vulnerabilty folders for discovered
  vulnerabilities in a TOE. Vulnerability folders will contain:
    - Only one feature file for the specific vulnerability
    - A LINK.lst file with a link to the site containing the vulnerability
    - (Optional) Evidence folder if necessary

  The following standard has been definied for vulneraility folders:
  {CWE-codenumber}-{location}-{difficulty} where:
    - {CWE-codenumber} is the codenumber of the vulnerability according to the
      Common Weakness Ennumeration (link:https://cwe.mitre.org/data/index.html)
    - {location} has to be a pointer to the vulnerability's location.
    - (optional) {difficulty} is the difficulty in which the vulnerability was
      found. All TOEs might not have a difficulty setting, that is why this is
      optional
  Some examples are (they do not necessarily exist in the repo but illustrate
  the point):
    - training/vbd/bwapp/352-xss-stored-2-medium/
    - training/vbd/dvwa/006-weak-session-ids-low/
    - training/vbd/webgoat/352-stored-xss/ #webgoat does not have difficulty
  """

  """
  Evidences:
  Presenting evidence of some kind of graphical output, like websites,
  might be difficult when using plain feature files.
  Think, for example, of a hacked blog via XSS that ended up with different font
  styles and such.
  Evidences are a way to include PNG pictures associated to a feature file so
  the hacker can graphically show anything he might consider relevant

  How they work?
  - Any feature file {name}.feature can have a {name} evidences folder in the
  same directory.
  - Evidence folders only accept PNG images
  - Evidences are referenced in two different ways:
    - Creating an <evidence> tag in a table inside a Scenario Outline like shown
      on the Extraction Scenario example
      (useful for referencing multiple evidences).
    - By using the following syntax: [evidence](image.png) like shown on the
      Normal use case Scenario example.
      (useful for referencing one or two evidences at most.)
  """